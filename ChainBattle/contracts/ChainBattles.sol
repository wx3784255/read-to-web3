// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Base64.sol";

contract ChainBattles is ERC721URIStorage  {
    using Strings for uint256;
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    mapping(uint256 => uint256) public tokenIdToLevels;

    constructor() ERC721 ("Chain Battles", "CBTLS"){
    }

function generateCharacter(uint256 tokenId) public returns(string memory){

    bytes memory svg = abi.encodePacked(
        '<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet" viewBox="0 0 300 180">',
        '<style type="text/css"> .base { font-family: microsoft yahei;} .warrior { fill: black; font-size: 28px; font-weight: bolder; } .level { fill: red; font-size: 20px; font-style: italic;} </style>',
        '<svg>',
        '<path fill="#ffffff" d="M 0.00 0.00 L 1243.00 0.00 L 1243.00 1189.00 L 0.00 1189.00 L 0.00 0.00 M 617.32 17.49 C 609.50 17.93 599.65 20.54 596.94 28.95 C 584.82 55.71 570.83 81.57 558.06 108.03 C 545.97 133.97 532.59 159.29 520.05 185.02 C 506.03 215.33 489.98 244.65 475.96 274.96 C 460.57 305.94 444.92 336.79 430.12 368.06 C 426.79 373.56 425.00 382.86 416.51 381.69 C 292.80 399.46 169.16 417.69 45.45 435.47 C 38.51 436.57 31.24 436.97 24.72 439.73 C 19.70 444.33 17.84 451.71 18.64 458.33 C 19.97 467.10 22.52 476.41 29.67 482.32 C 121.33 571.07 212.31 660.51 303.95 749.29 C 282.02 874.84 260.89 1000.54 239.08 1126.12 C 237.99 1132.37 236.99 1139.50 240.99 1145.02 C 249.71 1158.09 268.54 1160.21 282.00 1154.01 C 386.58 1098.84 491.31 1043.97 595.93 988.88 C 603.16 985.10 610.14 980.62 617.98 978.18 C 627.20 981.71 635.62 987.04 644.40 991.53 C 751.94 1048.02 859.43 1104.60 966.96 1161.09 C 979.19 1168.52 997.02 1158.82 999.45 1145.36 C 983.46 1051.80 967.29 958.25 951.33 864.68 C 945.03 826.22 937.43 787.95 932.09 749.35 C 954.86 726.02 978.95 704.06 1001.78 680.78 C 1019.73 664.75 1035.78 646.75 1053.67 630.66 C 1089.32 595.30 1125.69 560.70 1161.31 525.32 C 1178.26 510.29 1193.20 493.17 1210.22 478.21 C 1215.95 472.46 1223.80 466.92 1223.82 457.88 C 1224.11 450.07 1221.69 437.86 1211.50 438.37 C 1147.24 428.95 1082.94 419.77 1018.68 410.31 C 949.79 400.63 881.04 389.85 812.08 380.68 C 802.28 362.84 794.35 344.07 785.01 326.00 C 775.64 307.01 765.77 288.27 756.92 269.04 C 744.25 242.82 730.53 217.12 718.28 190.71 C 705.78 164.96 692.33 139.68 680.28 113.71 C 667.36 87.05 653.35 60.92 641.06 33.96 C 638.97 29.90 637.28 25.39 633.67 22.39 C 629.10 18.73 622.99 17.71 617.32 17.49 Z" />',
    '<path fill="#ffffff" d="M 601.30 75.43 C 608.57 74.84 614.40 83.09 610.63 89.63 C 563.83 196.46 516.91 303.26 470.09 410.09 C 467.86 414.35 465.12 419.67 459.41 419.37 C 341.38 438.02 223.32 456.59 105.29 475.31 C 98.19 478.21 90.01 470.51 92.28 463.32 C 93.73 459.99 96.74 457.10 100.42 456.59 C 210.18 439.32 319.92 421.91 429.68 404.65 C 436.77 403.35 444.07 402.95 451.04 401.00 C 453.44 400.60 454.21 397.95 455.17 396.12 C 500.61 292.00 546.48 188.06 591.97 83.97 C 593.49 79.85 596.59 75.80 601.30 75.43 Z" />',
    '<path fill="#ffffff" d="M 847.37 408.59 C 856.22 408.37 864.93 410.25 873.68 411.32 C 950.13 421.55 1026.56 431.89 1103.01 442.04 C 1106.97 442.84 1111.68 443.20 1114.29 446.72 C 1117.90 451.41 1116.04 459.35 1110.31 461.28 C 1105.57 462.34 1100.69 461.78 1095.96 461.12 C 1018.98 450.58 941.96 440.40 864.96 430.05 C 857.29 428.29 847.89 430.03 841.76 424.24 C 836.14 419.41 840.32 409.01 847.37 408.59 Z" />',
    '<path fill="#eeac3d" d="M 617.32 17.49 C 622.99 17.71 629.10 18.73 633.67 22.39 C 637.28 25.39 638.97 29.90 641.06 33.96 C 653.35 60.92 667.36 87.05 680.28 113.71 C 692.33 139.68 705.78 164.96 718.28 190.71 C 730.53 217.12 744.25 242.82 756.92 269.04 C 765.77 288.27 775.64 307.01 785.01 326.00 C 794.35 344.07 802.28 362.84 812.08 380.68 C 881.04 389.85 949.79 400.63 1018.68 410.31 C 1082.94 419.77 1147.24 428.95 1211.50 438.37 C 1221.69 437.86 1224.11 450.07 1223.82 457.88 C 1223.80 466.92 1215.95 472.46 1210.22 478.21 C 1193.20 493.17 1178.26 510.29 1161.31 525.32 C 1125.69 560.70 1089.32 595.30 1053.67 630.66 C 1035.78 646.75 1019.73 664.75 1001.78 680.78 C 978.95 704.06 954.86 726.02 932.09 749.35 C 937.43 787.95 945.03 826.22 951.33 864.68 C 967.29 958.25 983.46 1051.80 999.45 1145.36 C 997.02 1158.82 979.19 1168.52 966.96 1161.09 C 859.43 1104.60 751.94 1048.02 644.40 991.53 C 635.62 987.04 627.20 981.71 617.98 978.18 C 610.14 980.62 603.16 985.10 595.93 988.88 C 491.31 1043.97 386.58 1098.84 282.00 1154.01 C 268.54 1160.21 249.71 1158.09 240.99 1145.02 C 236.99 1139.50 237.99 1132.37 239.08 1126.12 C 260.89 1000.54 282.02 874.84 303.95 749.29 C 212.31 660.51 121.33 571.07 29.67 482.32 C 22.52 476.41 19.97 467.10 18.64 458.33 C 17.84 451.71 19.70 444.33 24.72 439.73 C 31.24 436.97 38.51 436.57 45.45 435.47 C 169.16 417.69 292.80 399.46 416.51 381.69 C 425.00 382.86 426.79 373.56 430.12 368.06 C 444.92 336.79 460.57 305.94 475.96 274.96 C 489.98 244.65 506.03 215.33 520.05 185.02 C 532.59 159.29 545.97 133.97 558.06 108.03 C 570.83 81.57 584.82 55.71 596.94 28.95 C 599.65 20.54 609.50 17.93 617.32 17.49 M 601.30 75.43 C 596.59 75.80 593.49 79.85 591.97 83.97 C 546.48 188.06 500.61 292.00 455.17 396.12 C 454.21 397.95 453.44 400.60 451.04 401.00 C 444.07 402.95 436.77 403.35 429.68 404.65 C 319.92 421.91 210.18 439.32 100.42 456.59 C 96.74 457.10 93.73 459.99 92.28 463.32 C 90.01 470.51 98.19 478.21 105.29 475.31 C 223.32 456.59 341.38 438.02 459.41 419.37 C 465.12 419.67 467.86 414.35 470.09 410.09 C 516.91 303.26 563.83 196.46 610.63 89.63 C 614.40 83.09 608.57 74.84 601.30 75.43 M 847.37 408.59 C 840.32 409.01 836.14 419.41 841.76 424.24 C 847.89 430.03 857.29 428.29 864.96 430.05 C 941.96 440.40 1018.98 450.58 1095.96 461.12 C 1100.69 461.78 1105.57 462.34 1110.31 461.28 C 1116.04 459.35 1117.90 451.41 1114.29 446.72 C 1111.68 443.20 1106.97 442.84 1103.01 442.04 C 1026.56 431.89 950.13 421.55 873.68 411.32 C 864.93 410.25 856.22 408.37 847.37 408.59 Z" />'
      '</svg',
 'x="70%" y="45%" class="base warrior" dominant-baseline="middle" text-anchor="middle">',"APPLE",'</text>',
        '<text x="70%" y="65%" class="base level" dominant-baseline="middle" text-anchor="middle">', "Levels: ",getLevels(tokenId),'</text>',
        '</svg>'
    );
    return string(
        abi.encodePacked(
            "data:image/svg+xml;base64,",
            Base64.encode(svg)
        )    
    );
}
function getLevels(uint256 tokenId) public view returns (string memory) {
    uint256 levels = tokenIdToLevels[tokenId];
    return levels.toString();
}
function getTokenURI(uint256 tokenId) public returns (string memory){
    bytes memory dataURI = abi.encodePacked(
        '{',
            '"name": "Chain Battles #', tokenId.toString(), '",',
            '"description": "Battles on chain",',
            '"image": "', generateCharacter(tokenId), '"',
        '}'
    );
    return string(
        abi.encodePacked(
            "data:application/json;base64,",
            Base64.encode(dataURI)
        )
    );
}
function mint() public {
    _tokenIds.increment();
    uint256 newItemId = _tokenIds.current();
    _safeMint(msg.sender, newItemId);
    tokenIdToLevels[newItemId] = 0;
    _setTokenURI(newItemId, getTokenURI(newItemId));
}
    function train(uint256 tokenId)public{
        require(_exists(tokenId));
        require(ownerOf(tokenId)==msg.sender,"You must own this token to train it");
        uint256 currentLevel=tokenIdToLevels[tokenId];
        tokenIdToLevels[tokenId]=currentLevel+1;
        _setTokenURI(tokenId,getTokenURI(tokenId));
        }
}